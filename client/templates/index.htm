<!DOCTYPE html>
<html>
    <head>
        <title>Sorting Visualizer</title>

        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {

                // Load canvas. Set height and width to screen height and width
                var c = document.querySelector('#mycanvas');
                c.height = screen.availHeight;
                c.width = screen.availWidth + 350;
                var ctx = c.getContext("2d");

                sort_btn = document.getElementById('perform');

                sort_btn.onclick = () => {
                    var choose_algo = Boolean(document.getElementById("algo").value != "none"); // whether algo is chosen
                    var choose_no = Boolean(document.getElementById("elements").value != "none"); // whether array size is chosen

                    if(!(choose_algo && choose_no)) {
                        // if any one is not chosen, alert
                        alert("Select an algorithm and array size");
                    }
                    else {
                        // if both are chosen
                        var algo = document.getElementById("algo").value; // get algo chosen
                        var n = Number(document.getElementById("elements").value); // get array size chosen
                        

                        // XHR object
                        var api_call = new XMLHttpRequest();
                        var url = `http://127.0.0.1:5000/${algo}/${n}`;

                        var a = document.getElementById("algo");
                        document.getElementById("function").innerHTML = a.options[a.selectedIndex].text + " on an array of " + n.toString() + " elements";


                        function draw_settings(x, y, width, height, height_multiplier, color) {
                            // bar settings
                            ctx.beginPath();
                            ctx.rect(40 + (width + 5) * x, y, width, height_multiplier * height);
                            ctx.fillStyle = color;
                            ctx.fill();
                        }


                        function get_ht_multiplier(n) {
                            // height multiplier of the bars
                            switch(n) {
                                case 25: return 30;
                                case 50: return 15;
                                case 75: return 10;
                                case 100: return 7.5;
                                case 200: return 3.5;
                            }
                        }


                        function draw(arr) {
                            // draw all bars representing the array

                            let bar_width = Math.floor((c.width - 75 - 5*n)/n);
                            var height_multiplier = get_ht_multiplier(n);
                            
                            // draw all the bars representing the array
                            for(var i = 0; i < arr.length - 2; i++) {
                                draw_settings(i, 40, bar_width, arr[i], height_multiplier, "white");
                            }
                            // last two elements of array are the indices that are to be swapped. Color of swapping elements = yellow, red
                            if(algo != "merge") {
                                draw_settings(arr[arr.length - 2], 40, bar_width, arr[arr[arr.length - 2]], height_multiplier, "yellow");
                            }
                            draw_settings(arr[arr.length - 1], 40, bar_width, arr[arr[arr.length - 1]], height_multiplier, "red");
                        }


                        function clear_canvas() {
                            // clear the canvas every time an array is drawn
                            ctx.clearRect(0, 0, c.width, c.height);
                        }


                        function start(data) {
                            // function to be executed after getting response from server
                            var speed = 0;

                            // set speeds of sorting algos according to array size
                            if(algo == "bubble") {
                               switch(n) {
                                   case 25:
                                       speed = 10;
                                       break;
                                    case 50:
                                        speed = 7;
                                        break;
                                    case 75:
                                        speed = 4;
                                        break;
                                    case 100:
                                        speed = 2;
                                        break;
                                    case 200:
                                        speed = 0.5;
                                        break;
                               }
                            }
                            else if(algo == "selection") {
                                switch(n) {
                                    case 25:
                                       speed = 100;
                                       break;
                                    case 50:
                                        speed = 100;
                                        break;
                                    case 75:
                                        speed = 100;
                                        break;
                                    case 100:
                                        speed = 70;
                                        break;
                                    case 200:
                                        speed = 40;
                                        break;
                                }
                           }
                           else if(algo == "insertion") {
                               switch(n) {
                                   case 25:
                                       speed = 35;
                                       break;
                                    case 50:
                                        speed = 17;
                                        break;
                                    case 75:
                                        speed = 8;
                                        break;
                                    case 100:
                                        speed = 4;
                                        break;
                                    case 200:
                                        speed = 3;
                                        break;
                               }
                           }
                           else if(algo == "quick") {
                               switch(n) {
                                   case 25:
                                       speed = 100;
                                       break;
                                    case 50:
                                        speed = 50;
                                        break;
                                    case 75:
                                        speed = 35;
                                        break;
                                    case 100:
                                        speed = 30;
                                        break;
                                    case 200:
                                        speed = 20;
                                        break;
                               }
                           }
                           else if(algo == "merge") {
                              switch(n) {
                                  case 25:
                                      speed = 80
                                      break;
                                case 50:
                                    speed = 40;
                                    break;
                                case 75:
                                    speed = 30;
                                    break;
                                case 100:
                                    speed = 20;
                                    break;
                                case 200:
                                    speed = 12;
                                    break;
                              }
                           }
                           else { //heap sort
                                switch(n) {
                                    case 25:
                                        speed = 80
                                        break;
                                    case 50:
                                        speed = 40;
                                        break;
                                    case 75:
                                        speed = 30;
                                        break;
                                    case 100:
                                        speed = 20;
                                        break;
                                    case 200:
                                        speed = 10;
                                        break;
                                }
                            }

                           // iterate through the server JSON response where all array states are present.
                           key_arr = Object.keys(data);
                           for(var i = 0; i < key_arr.length; i++) {
                                setTimeout((arr) => {
                                    clear_canvas();
                                    draw(arr);
                                }, speed * i, data[key_arr[i]])
                           }
                        }

                        // when server has responded
                        api_call.onreadystatechange = () => {
                            if(api_call.readyState == 4 && api_call.status == 200) {
                                var data = JSON.parse(api_call.responseText); // JSONify the data
                                start(data); // start drawing
                            }
                        };
                        api_call.open("POST", url, true); // GET request
                        api_call.send(); // send request
                    }
                };
            });
        </script>

        <style>
            body {
                background-color: black;
                color: white;
            }
            h5 {
                text-align: center;
            }
            canvas {
                border: 2px solid whitesmoke;
            }
            #function {
                font-weight: bold;
            }
        </style>

    </head>
    <body>
        <div class="container-fluid">
            <h5>Visualize different sorting algorithms for arrays of different sizes !</h5>
            <div class="row">
                <div class="col">
                    <div class="select-algo">
                        <select class="form-control" id="algo" name="algorithms">
                            <option hidden value="none">Choose an algorithm</option>
                            <option value="bubble">Bubble Sort</option>
                            <option value="selection">Selection Sort</option>
                            <option value="insertion">Insertion Sort</option>
                            <option value="quick">Quick Sort</option>
                            <option value="merge">Merge Sort</option>
                            <option value="heap">Heap Sort</option>
                        </select>
                    </div>    
                </div>
                <div class="col">
                    <div class="select-no">
                        <select class="form-control" id="elements" name="elements">
                            <option hidden value="none">Select array size</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="75">75</option>
                            <option value="100">100</option>
                            <option value="200">200</option>
                        </select>
                    </div>
                </div>
                <div class="col text-left">
                    <button type="button" class="btn btn-primary btn-md" id="perform">Sort!</button>&nbsp;&nbsp;&nbsp;&nbsp;
                    <span id="function"></span>
                </div>
            </div>
            <canvas id="mycanvas"></canvas>
        </div>
    </body>
</html>